
# Variable definitions - Generated from the 'variables' object of the JSON config
variable "aws_access_key" {
  type    = string
  default = "${env("AWS_ACCESS_KEY_ID")}"
}

variable "aws_secret_key" {
  type    = string
  default = "${env("AWS_SECRET_ACCESS_KEY")}"
}

variable "owner" {
  type    = string
  default = "${env("OWNER")}"
}

# Information used to identify an existing base AMI from which we derive our customized AMI
# Generated from the information contained in an entity of the 'builders' list of the JSON config
# This block, 'data', is not necessary since its content can be rearranged and merged into a 'source' block
data "amazon-ami" "autogenerated_1" {
  access_key = "${var.aws_access_key}"
  filters = {
    name                = "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20200625"
    root-device-type    = "ebs"
    virtualization-type = "hvm"
  }
  most_recent = true
  owners      = ["099720109477"]
  region      = "eu-west-2"
  secret_key  = "${var.aws_secret_key}"
}

# Format current timestamp to be used as a part of our AMI's name
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# The actual template for our AMI. Note where the type 'amazon-ebs' is specified
# Generated from the information contained in an entity of the 'builders' list of the JSON config
source "amazon-ebs" "autogenerated_1" {
  access_key    = "${var.aws_access_key}"
  ami_name      = "bryan-k3s-server-${local.timestamp}"
  instance_type = "t3.large"
  region        = "eu-west-2"
  run_tags = {
    owner = "${var.owner}"
    type  = "k3s-server"
  }
  run_volume_tags = {
    owner = "${var.owner}"
    type  = "k3s-server"
  }
  secret_key   = "${var.aws_secret_key}"
  source_ami   = "${data.amazon-ami.autogenerated_1.id}"
  ssh_username = "ubuntu"
}

# Build a resource i.e. our AMI; by invoking a source then provision the resource
# The provisioners are generated from the 'provisioners' list of the JSON config
build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "file" {
    destination = "/home/ubuntu/"
    source      = "./provision.sh"
  }

/* 
 * If not spinning up a container and working on Windows, you might have to change
 * this and use script mode:- script = "./provision.sh"
 */
  provisioner "shell" {
    inline = ["/home/ubuntu/provision.sh"]
  }

  provisioner "file" {
    destination = "/output/token"
    direction   = "download"
    source      = "/home/ubuntu/token"
  }

  provisioner "file" {
    destination = "/output/k3s.yaml"
    direction   = "download"
    source      = "/etc/rancher/k3s/k3s.yaml"
  }

}
